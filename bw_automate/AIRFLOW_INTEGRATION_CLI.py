#!/usr/bin/env python3
"""
üöÅ AIRFLOW INTEGRATION CLI
CLI espec√≠fico para an√°lise PostgreSQL em ambientes Airflow
"""

import os
import sys
import argparse
import json
import time
from pathlib import Path
from typing import Dict, List, Any, Optional

# Import enhanced mapper
try:
    from ENHANCED_POSTGRESQL_AIRFLOW_MAPPER import EnhancedPostgreSQLAirflowMapper
    from POSTGRESQL_TABLE_MAPPER import PostgreSQLTableMapper
except ImportError as e:
    print(f"‚ö†Ô∏è  M√≥dulo n√£o encontrado: {e}")
    sys.exit(1)

class AirflowIntegrationCLI:
    """CLI integrado para an√°lise PostgreSQL + Airflow"""
    
    def __init__(self):
        self.version = "1.0.0"
    
    def show_banner(self):
        """Mostra banner espec√≠fico do Airflow"""
        print("üöÅ " + "="*60)
        print("üöÅ BW_AUTOMATE - AIRFLOW POSTGRESQL ANALYZER")
        print("üöÅ " + "="*60)
        print(f"üì¶ Vers√£o: {self.version}")
        print("üéØ Especializado em:")
        print("   ‚úÖ An√°lise de c√≥digos Python standalone")
        print("   ‚úÖ DAGs Airflow chamando Pythons")
        print("   ‚úÖ Chains de par√¢metros entre arquivos")
        print("   ‚úÖ Decorators, classes e fun√ß√µes interconectadas")
        print()
    
    def analyze_project_enhanced(self, project_path: str, output_dir: str = ".", mode: str = "full") -> Dict[str, Any]:
        """Executa an√°lise com mapper avan√ßado"""
        print("üöÅ Iniciando an√°lise avan√ßada (Airflow + PostgreSQL)...")
        
        if mode == "full":
            mapper = EnhancedPostgreSQLAirflowMapper()
            results = mapper.analyze_project(project_path)
            mapper.generate_enhanced_reports(results, output_dir)
        else:
            # Modo simples - s√≥ PostgreSQL
            mapper = PostgreSQLTableMapper()
            results = mapper.analyze_project(project_path)
            
            # Salva resultado
            output_file = Path(output_dir) / "postgresql_simple_analysis.json"
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
        
        return results
    
    def show_analysis_summary(self, results: Dict[str, Any], mode: str = "full"):
        """Mostra resumo da an√°lise"""
        summary = results.get('analysis_summary', {})
        
        print(f"\nüìä RESUMO DA AN√ÅLISE:")
        print(f"   üìÅ Arquivos analisados: {summary.get('files_analyzed', 0)}")
        print(f"   üóÉÔ∏è Tabelas encontradas: {summary.get('unique_tables_found', 0)}")
        print(f"   üìä Total de refer√™ncias: {summary.get('total_table_references', 0)}")
        print(f"   üìÇ Esquemas: {len(summary.get('schemas_found', []))}")
        print(f"   ‚è±Ô∏è Tempo: {summary.get('analysis_time_seconds', 0)}s")
        
        if mode == "full":
            print(f"   üöÅ DAGs Airflow: {summary.get('airflow_dags_found', 0)}")
            print(f"   üîó Fluxos de par√¢metros: {summary.get('parameter_flows_detected', 0)}")
            
            # Detalhes de DAGs se houver
            airflow_analysis = results.get('airflow_analysis', {})
            if airflow_analysis.get('total_dags', 0) > 0:
                print(f"\nüöÅ DETALHES AIRFLOW:")
                print(f"   üìã Total de DAGs: {airflow_analysis['total_dags']}")
                print(f"   ‚öôÔ∏è Total de tasks: {airflow_analysis['total_tasks']}")
                
                for dag in airflow_analysis.get('dags', [])[:5]:  # Top 5
                    print(f"   ‚Ä¢ {dag['dag_id']}: {dag['tasks_count']} tasks")
        
        # Top tabelas
        if 'statistics' in results:
            most_ref = results['statistics'].get('most_referenced_tables', [])
            if most_ref:
                print(f"\nüèÜ TOP 5 TABELAS:")
                for item in most_ref[:5]:
                    print(f"   ‚Ä¢ {item['table']}: {item['references']} refs")
    
    def generate_comparison_report(self, project_path: str, output_dir: str = "."):
        """Gera relat√≥rio comparativo entre an√°lise simples e avan√ßada"""
        print("üìä Gerando relat√≥rio comparativo...")
        
        # An√°lise simples
        print("   üî∏ Executando an√°lise simples...")
        simple_results = self.analyze_project_enhanced(project_path, output_dir, mode="simple")
        
        # An√°lise avan√ßada
        print("   üî∏ Executando an√°lise avan√ßada...")
        enhanced_results = self.analyze_project_enhanced(project_path, output_dir, mode="full")
        
        # Compara√ß√£o
        comparison = {
            "analysis_comparison": {
                "simple_analysis": {
                    "tables_found": simple_results.get('analysis_summary', {}).get('unique_tables_found', 0),
                    "references": simple_results.get('analysis_summary', {}).get('total_table_references', 0),
                    "time": simple_results.get('analysis_summary', {}).get('analysis_time_seconds', 0)
                },
                "enhanced_analysis": {
                    "tables_found": enhanced_results.get('analysis_summary', {}).get('unique_tables_found', 0),
                    "references": enhanced_results.get('analysis_summary', {}).get('total_table_references', 0),
                    "airflow_dags": enhanced_results.get('analysis_summary', {}).get('airflow_dags_found', 0),
                    "parameter_flows": enhanced_results.get('analysis_summary', {}).get('parameter_flows_detected', 0),
                    "time": enhanced_results.get('analysis_summary', {}).get('analysis_time_seconds', 0)
                }
            },
            "enhancement_benefits": {
                "additional_tables_found": enhanced_results.get('analysis_summary', {}).get('unique_tables_found', 0) - simple_results.get('analysis_summary', {}).get('unique_tables_found', 0),
                "additional_references": enhanced_results.get('analysis_summary', {}).get('total_table_references', 0) - simple_results.get('analysis_summary', {}).get('total_table_references', 0),
                "airflow_features_detected": enhanced_results.get('analysis_summary', {}).get('airflow_dags_found', 0) > 0,
                "parameter_tracking": enhanced_results.get('analysis_summary', {}).get('parameter_flows_detected', 0) > 0
            }
        }
        
        # Salva compara√ß√£o
        comparison_file = Path(output_dir) / "analysis_comparison.json"
        with open(comparison_file, 'w', encoding='utf-8') as f:
            json.dump(comparison, f, indent=2, ensure_ascii=False)
        
        # Mostra resumo da compara√ß√£o
        print(f"\nüìä COMPARA√á√ÉO DE RESULTADOS:")
        simple = comparison["analysis_comparison"]["simple_analysis"]
        enhanced = comparison["analysis_comparison"]["enhanced_analysis"]
        benefits = comparison["enhancement_benefits"]
        
        print(f"   üìã AN√ÅLISE SIMPLES:")
        print(f"      Tabelas: {simple['tables_found']}")
        print(f"      Refer√™ncias: {simple['references']}")
        print(f"      Tempo: {simple['time']:.2f}s")
        
        print(f"   üìã AN√ÅLISE AVAN√áADA:")
        print(f"      Tabelas: {enhanced['tables_found']} (+{benefits['additional_tables_found']})")
        print(f"      Refer√™ncias: {enhanced['references']} (+{benefits['additional_references']})")
        print(f"      DAGs Airflow: {enhanced['airflow_dags']}")
        print(f"      Fluxos par√¢metros: {enhanced['parameter_flows']}")
        print(f"      Tempo: {enhanced['time']:.2f}s")
        
        print(f"\nüéØ BENEF√çCIOS DA AN√ÅLISE AVAN√áADA:")
        if benefits['additional_tables_found'] > 0:
            print(f"   ‚úÖ +{benefits['additional_tables_found']} tabelas adicionais encontradas")
        if benefits['additional_references'] > 0:
            print(f"   ‚úÖ +{benefits['additional_references']} refer√™ncias adicionais")
        if benefits['airflow_features_detected']:
            print(f"   ‚úÖ Recursos Airflow detectados")
        if benefits['parameter_tracking']:
            print(f"   ‚úÖ Rastreamento de par√¢metros ativo")
        
        print(f"\nüìÑ Relat√≥rio comparativo: {comparison_file}")
        
        return comparison

def main():
    """Fun√ß√£o principal do CLI Airflow"""
    parser = argparse.ArgumentParser(
        description="BW_AUTOMATE - Airflow PostgreSQL Analyzer",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  %(prog)s analyze /path/to/project
  %(prog)s analyze /path/to/project --mode enhanced
  %(prog)s analyze /path/to/project --output /custom/output
  %(prog)s compare /path/to/project
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Comandos dispon√≠veis')
    
    # Comando analyze
    analyze_parser = subparsers.add_parser('analyze', help='Executa an√°lise PostgreSQL')
    analyze_parser.add_argument('project_path', help='Caminho do projeto')
    analyze_parser.add_argument('--mode', '-m', 
                              choices=['simple', 'enhanced', 'full'],
                              default='enhanced',
                              help='Modo de an√°lise (default: enhanced)')
    analyze_parser.add_argument('--output', '-o', 
                               default='./airflow_analysis_results',
                               help='Diret√≥rio de sa√≠da')
    
    # Comando compare
    compare_parser = subparsers.add_parser('compare', help='Compara an√°lise simples vs avan√ßada')
    compare_parser.add_argument('project_path', help='Caminho do projeto')
    compare_parser.add_argument('--output', '-o', 
                               default='./comparison_results',
                               help='Diret√≥rio de sa√≠da')
    
    # Comando demo
    demo_parser = subparsers.add_parser('demo', help='Demonstra√ß√£o com projeto exemplo')
    demo_parser.add_argument('--output', '-o', 
                           default='./demo_results',
                           help='Diret√≥rio de sa√≠da')
    
    args = parser.parse_args()
    
    # Inicializa CLI
    cli = AirflowIntegrationCLI()
    cli.show_banner()
    
    if args.command == 'analyze':
        # Valida projeto
        if not os.path.exists(args.project_path):
            print(f"‚ùå Projeto n√£o encontrado: {args.project_path}")
            sys.exit(1)
        
        # Cria diret√≥rio de output
        os.makedirs(args.output, exist_ok=True)
        
        # Executa an√°lise
        try:
            results = cli.analyze_project_enhanced(args.project_path, args.output, args.mode)
            cli.show_analysis_summary(results, args.mode)
            
            print(f"\n‚úÖ An√°lise conclu√≠da!")
            print(f"üìÅ Resultados em: {args.output}")
            
        except Exception as e:
            print(f"‚ùå Erro durante an√°lise: {e}")
            sys.exit(1)
    
    elif args.command == 'compare':
        # Valida projeto
        if not os.path.exists(args.project_path):
            print(f"‚ùå Projeto n√£o encontrado: {args.project_path}")
            sys.exit(1)
        
        # Cria diret√≥rio de output
        os.makedirs(args.output, exist_ok=True)
        
        # Executa compara√ß√£o
        try:
            comparison = cli.generate_comparison_report(args.project_path, args.output)
            
            print(f"\n‚úÖ Compara√ß√£o conclu√≠da!")
            print(f"üìÅ Resultados em: {args.output}")
            
        except Exception as e:
            print(f"‚ùå Erro durante compara√ß√£o: {e}")
            sys.exit(1)
    
    elif args.command == 'demo':
        # Demo com projeto atual
        current_project = "/home/dev/code/labcom_etiquetas"
        
        if os.path.exists(current_project):
            print(f"üé¨ Executando demo com projeto: {current_project}")
            os.makedirs(args.output, exist_ok=True)
            
            try:
                results = cli.analyze_project_enhanced(current_project, args.output, "full")
                cli.show_analysis_summary(results, "full")
                
                print(f"\nüé¨ Demo conclu√≠da!")
                print(f"üìÅ Resultados em: {args.output}")
                
            except Exception as e:
                print(f"‚ùå Erro no demo: {e}")
        else:
            print(f"‚ùå Projeto demo n√£o encontrado: {current_project}")
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main()